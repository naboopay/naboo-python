# coding: utf-8

"""
    NabooApi V1

    Here you have the first version of the naboo api to create checkout automatically

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from naboo.models.product_model import ProductModel
from naboo.models.wallet import Wallet
from typing import Optional, Set
from typing_extensions import Self

class TransactionRequest(BaseModel):
    """
    TransactionRequest
    """ # noqa: E501
    method_of_payment: List[Wallet]
    products: Optional[List[ProductModel]]
    success_url: Optional[Annotated[str, Field(strict=True)]] = None
    error_url: Optional[Annotated[str, Field(strict=True)]] = None
    is_escrow: Optional[StrictBool] = False
    is_merchant: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["method_of_payment", "products", "success_url", "error_url", "is_escrow", "is_merchant"]

    @field_validator('success_url')
    def success_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https:\/\/[^\s]+$", value):
            raise ValueError(r"must validate the regular expression /^https:\/\/[^\s]+$/")
        return value

    @field_validator('error_url')
    def error_url_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^https:\/\/[^\s]+$", value):
            raise ValueError(r"must validate the regular expression /^https:\/\/[^\s]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # set to None if products (nullable) is None
        # and model_fields_set contains the field
        if self.products is None and "products" in self.model_fields_set:
            _dict['products'] = None

        # set to None if success_url (nullable) is None
        # and model_fields_set contains the field
        if self.success_url is None and "success_url" in self.model_fields_set:
            _dict['success_url'] = None

        # set to None if error_url (nullable) is None
        # and model_fields_set contains the field
        if self.error_url is None and "error_url" in self.model_fields_set:
            _dict['error_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "method_of_payment": obj.get("method_of_payment"),
            "products": [ProductModel.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "success_url": obj.get("success_url"),
            "error_url": obj.get("error_url"),
            "is_escrow": obj.get("is_escrow") if obj.get("is_escrow") is not None else False,
            "is_merchant": obj.get("is_merchant") if obj.get("is_merchant") is not None else False
        })
        return _obj


