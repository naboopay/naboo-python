# coding: utf-8

"""
    NabooApi V1

    Here you have the first version of the naboo api to create checkout automatically

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from naboo.models.product_model import ProductModel
from naboo.models.transaction_status_enum import TransactionStatusEnum
from naboo.models.wallet import Wallet
from typing import Optional, Set
from typing_extensions import Self

class GetOneTransaction(BaseModel):
    """
    GetOneTransaction
    """ # noqa: E501
    order_id: StrictStr
    method_of_payment: List[Wallet]
    amount: StrictInt
    amount_to_pay: StrictInt
    currency: StrictStr
    created_at: StrictStr
    transaction_status: TransactionStatusEnum
    products: Optional[List[ProductModel]]
    is_done: StrictBool
    is_escrow: StrictBool
    is_merchant: StrictBool
    checkout_url: StrictStr
    __properties: ClassVar[List[str]] = ["order_id", "method_of_payment", "amount", "amount_to_pay", "currency", "created_at", "transaction_status", "products", "is_done", "is_escrow", "is_merchant", "checkout_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetOneTransaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item_products in self.products:
                if _item_products:
                    _items.append(_item_products.to_dict())
            _dict['products'] = _items
        # set to None if products (nullable) is None
        # and model_fields_set contains the field
        if self.products is None and "products" in self.model_fields_set:
            _dict['products'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetOneTransaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order_id": obj.get("order_id"),
            "method_of_payment": obj.get("method_of_payment"),
            "amount": obj.get("amount"),
            "amount_to_pay": obj.get("amount_to_pay"),
            "currency": obj.get("currency"),
            "created_at": obj.get("created_at"),
            "transaction_status": obj.get("transaction_status"),
            "products": [ProductModel.from_dict(_item) for _item in obj["products"]] if obj.get("products") is not None else None,
            "is_done": obj.get("is_done"),
            "is_escrow": obj.get("is_escrow"),
            "is_merchant": obj.get("is_merchant"),
            "checkout_url": obj.get("checkout_url")
        })
        return _obj


